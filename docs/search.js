window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "uisrnn", "modulename": "uisrnn", "kind": "module", "doc": "<p>The module for Unbounded Interleaved-State Recurrent Neural Network.</p>\n\n<p>An introduction is available at [README.md].</p>\n"}, {"fullname": "uisrnn.parse_arguments", "modulename": "uisrnn", "qualname": "parse_arguments", "kind": "function", "doc": "<p>Parse arguments.</p>\n\n<p>Returns:\n  A tuple of:</p>\n\n<pre><code>- `model_args`: model arguments\n- `training_args`: training arguments\n- `inference_args`: inference arguments\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.compute_sequence_match_accuracy", "modulename": "uisrnn", "qualname": "compute_sequence_match_accuracy", "kind": "function", "doc": "<p>Compute the accuracy between two sequences by finding optimal matching.</p>\n\n<p>Args:\n  sequence1: A list of integers or strings.\n  sequence2: A list of integers or strings.</p>\n\n<p>Returns:\n  accuracy: sequence matching accuracy as a number in [0.0, 1.0]</p>\n\n<p>Raises:\n  TypeError: If sequence1 or sequence2 is not list.\n  ValueError: If sequence1 and sequence2 are not same size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence1</span>, </span><span class=\"param\"><span class=\"n\">sequence2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.output_result", "modulename": "uisrnn", "qualname": "output_result", "kind": "function", "doc": "<p>Produce a string to summarize the experiment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_args</span>, </span><span class=\"param\"><span class=\"n\">training_args</span>, </span><span class=\"param\"><span class=\"n\">test_record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN", "modulename": "uisrnn", "qualname": "UISRNN", "kind": "class", "doc": "<p>Unbounded Interleaved-State Recurrent Neural Networks.</p>\n"}, {"fullname": "uisrnn.UISRNN.__init__", "modulename": "uisrnn", "qualname": "UISRNN.__init__", "kind": "function", "doc": "<p>Construct the UISRNN object.</p>\n\n<p>Args:\n  args: Model configurations. See <code>arguments.py</code> for details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span>)</span>"}, {"fullname": "uisrnn.UISRNN.observation_dim", "modulename": "uisrnn", "qualname": "UISRNN.observation_dim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.device", "modulename": "uisrnn", "qualname": "UISRNN.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.rnn_model", "modulename": "uisrnn", "qualname": "UISRNN.rnn_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.rnn_init_hidden", "modulename": "uisrnn", "qualname": "UISRNN.rnn_init_hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.estimate_sigma2", "modulename": "uisrnn", "qualname": "UISRNN.estimate_sigma2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.estimate_transition_bias", "modulename": "uisrnn", "qualname": "UISRNN.estimate_transition_bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.sigma2", "modulename": "uisrnn", "qualname": "UISRNN.sigma2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.transition_bias", "modulename": "uisrnn", "qualname": "UISRNN.transition_bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.transition_bias_denominator", "modulename": "uisrnn", "qualname": "UISRNN.transition_bias_denominator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.crp_alpha", "modulename": "uisrnn", "qualname": "UISRNN.crp_alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.logger", "modulename": "uisrnn", "qualname": "UISRNN.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.UISRNN.save", "modulename": "uisrnn", "qualname": "UISRNN.save", "kind": "function", "doc": "<p>Save the model to a file.</p>\n\n<p>Args:\n  filepath: the path of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN.load", "modulename": "uisrnn", "qualname": "UISRNN.load", "kind": "function", "doc": "<p>Load the model from a file.</p>\n\n<p>Args:\n  filepath: the path of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN.fit_concatenated", "modulename": "uisrnn", "qualname": "UISRNN.fit_concatenated", "kind": "function", "doc": "<p>Fit UISRNN model to concatenated sequence and cluster_id.</p>\n\n<p>Args:\n  train_sequence: the training observation sequence, which is a\n    2-dim numpy array of real numbers, of size <code>N * D</code>.</p>\n\n<pre><code>- `N`: summation of lengths of all utterances.\n- `D`: observation dimension.\n\nFor example,\n</code></pre>\n\n<p><pre><code>train_sequence =\n[[1.2 3.0 -4.1 6.0]    --&gt; an entry of speaker #0 from utterance 'iaaa'\n [0.8 -1.1 0.4 0.5]    --&gt; an entry of speaker #1 from utterance 'iaaa'\n [-0.2 1.0 3.8 5.7]    --&gt; an entry of speaker #0 from utterance 'iaaa'\n [3.8 -0.1 1.5 2.3]    --&gt; an entry of speaker #0 from utterance 'ibbb'\n [1.2 1.4 3.6 -2.7]]   --&gt; an entry of speaker #0 from utterance 'ibbb'\n</code></pre></p>\n\n<pre><code>Here `N=5`, `D=4`.\n\nWe concatenate all training utterances into this single sequence.\n</code></pre>\n\n<p>train_cluster_id: the speaker id sequence, which is 1-dim list or\n    numpy array of strings, of size <code>N</code>.\n    For example,</p>\n\n<p><pre><code>train_cluster_id =\n  ['iaaa_0', 'iaaa_1', 'iaaa_0', 'ibbb_0', 'ibbb_0']\n</code></pre></p>\n\n<pre><code>'iaaa_0' means the entry belongs to speaker #0 in utterance 'iaaa'.\n\nNote that the order of entries within an utterance are preserved,\nand all utterances are simply concatenated together.\n</code></pre>\n\n<p>args: Training configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Raises:\n  TypeError: If train_sequence or train_cluster_id is of wrong type.\n  ValueError: If train_sequence or train_cluster_id has wrong dimension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_sequence</span>, </span><span class=\"param\"><span class=\"n\">train_cluster_id</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN.fit", "modulename": "uisrnn", "qualname": "UISRNN.fit", "kind": "function", "doc": "<p>Fit UISRNN model.</p>\n\n<p>Args:\n  train_sequences: Either a list of training sequences, or a single\n    concatenated training sequence:</p>\n\n<pre><code>1. train_sequences is list, and each element is a 2-dim numpy array\n   of real numbers, of size: `length * D`.\n   The length varies among different sequences, but the D is the same.\n   In speaker diarization, each sequence is the sequence of speaker\n   embeddings of one utterance.\n2. train_sequences is a single concatenated sequence, which is a\n   2-dim numpy array of real numbers. See `fit_concatenated()`\n   for more details.\n</code></pre>\n\n<p>train_cluster_ids: Ground truth labels for train_sequences:</p>\n\n<pre><code>1. if train_sequences is a list, this must also be a list of the same\n   size, each element being a 1-dim list or numpy array of strings.\n2. if train_sequences is a single concatenated sequence, this\n   must also be the concatenated 1-dim list or numpy array of strings\n</code></pre>\n\n<p>args: Training configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Raises:\n  TypeError: If train_sequences or train_cluster_ids is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_sequences</span>, </span><span class=\"param\"><span class=\"n\">train_cluster_ids</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN.predict_single", "modulename": "uisrnn", "qualname": "UISRNN.predict_single", "kind": "function", "doc": "<p>Predict labels for a single test sequence using UISRNN model.</p>\n\n<p>Args:\n  test_sequence: the test observation sequence, which is 2-dim numpy array\n    of real numbers, of size <code>N * D</code>.</p>\n\n<pre><code>- `N`: length of one test utterance.\n- `D` : observation dimension.\n\nFor example:\n</code></pre>\n\n<p><pre><code>test_sequence =\n[[2.2 -1.0 3.0 5.6]    --&gt; 1st entry of utterance 'iccc'\n [0.5 1.8 -3.2 0.4]    --&gt; 2nd entry of utterance 'iccc'\n [-2.2 5.0 1.8 3.7]    --&gt; 3rd entry of utterance 'iccc'\n [-3.8 0.1 1.4 3.3]    --&gt; 4th entry of utterance 'iccc'\n [0.1 2.7 3.5 -1.7]]   --&gt; 5th entry of utterance 'iccc'\n</code></pre></p>\n\n<pre><code>Here `N=5`, `D=4`.\n</code></pre>\n\n<p>args: Inference configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Returns:\n  predicted_cluster_id: predicted speaker id sequence, which is\n    an array of integers, of size <code>N</code>.\n    For example, <code>predicted_cluster_id = [0, 1, 0, 0, 1]</code></p>\n\n<p>Raises:\n  TypeError: If test_sequence is of wrong type.\n  ValueError: If test_sequence has wrong dimension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_sequence</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.UISRNN.predict", "modulename": "uisrnn", "qualname": "UISRNN.predict", "kind": "function", "doc": "<p>Predict labels for a single or many test sequences using UISRNN model.</p>\n\n<p>Args:\n  test_sequences: Either a list of test sequences, or a single test\n    sequence. Each test sequence is a 2-dim numpy array\n    of real numbers. See <code>predict_single()</code> for details.\n  args: Inference configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Returns:\n  predicted_cluster_ids: Predicted labels for test_sequences.</p>\n\n<pre><code>1. if test_sequences is a list, predicted_cluster_ids will be a list\n   of the same size, where each element being a 1-dim list of strings.\n2. if test_sequences is a single sequence, predicted_cluster_ids will\n   be a 1-dim list of strings\n</code></pre>\n\n<p>Raises:\n  TypeError: If test_sequences is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_sequences</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.parallel_predict", "modulename": "uisrnn", "qualname": "parallel_predict", "kind": "function", "doc": "<p>Run prediction in parallel using torch.multiprocessing.</p>\n\n<p>This is a beta feature. It makes prediction slower on CPU. But it's reported\nthat it makes prediction faster on GPU.</p>\n\n<p>Args:\n  model: instance of UISRNN model\n  test_sequences: a list of test sequences, or a single test\n    sequence. Each test sequence is a 2-dim numpy array\n    of real numbers. See <code>predict_single()</code> for details.\n  args: Inference configurations. See <code>arguments.py</code> for details.\n  num_processes: number of parallel processes.</p>\n\n<p>Returns:\n  a list of the same size as test_sequences, where each element\n  being a 1-dim list of strings.</p>\n\n<p>Raises:\n    TypeError: If test_sequences is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">test_sequences</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.arguments", "modulename": "uisrnn.arguments", "kind": "module", "doc": "<p>Arguments for UISRNN.</p>\n"}, {"fullname": "uisrnn.arguments.str2bool", "modulename": "uisrnn.arguments", "qualname": "str2bool", "kind": "function", "doc": "<p>A function to convert string to bool value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.arguments.parse_arguments", "modulename": "uisrnn.arguments", "qualname": "parse_arguments", "kind": "function", "doc": "<p>Parse arguments.</p>\n\n<p>Returns:\n  A tuple of:</p>\n\n<pre><code>- `model_args`: model arguments\n- `training_args`: training arguments\n- `inference_args`: inference arguments\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.contrib", "modulename": "uisrnn.contrib", "kind": "module", "doc": "<p>The module for community contributed code.</p>\n\n<p>An introduction is available at [README.md].</p>\n"}, {"fullname": "uisrnn.contrib.contrib_template", "modulename": "uisrnn.contrib.contrib_template", "kind": "module", "doc": "<p>This is a template for community contributions.</p>\n"}, {"fullname": "uisrnn.contrib.contrib_template.example_function", "modulename": "uisrnn.contrib.contrib_template", "qualname": "example_function", "kind": "function", "doc": "<p>This is an example function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.contrib.range_search_crp_alpha", "modulename": "uisrnn.contrib.range_search_crp_alpha", "kind": "module", "doc": "<p>This module implements method to search for best crp_alpha within a range for\na given data set.\n For example</p>\n\n<p><pre><code>  train_cluster_id = np.array(\n    ['0_0', '0_0', '0_1', '0_1', '0_1', '0_0', '0_0', '1_0', '1_0', '1_0',\n    '1_1', '1_1', '1_1', '1_0', '1_0','1_0', '1_2', '1_2', '1_2'])\n  print(estimate_crp_alpha(train_cluster_id))\n  0.5\n</code></pre></p>\n\n<p>Function for user:\n   estimate_crp_alpha: see docstring for details.\n Internal functions:\n   _get_cdf: see docstring for details.\n   _get_cdf_single: see docstring for details.\n   _get_k_t: see docstring for details.\n   _get_n_kt: see docstring for details.\n   _get_cluster_id_single: see docstring for details.\n   _get_normalized_id: see docstring for details.</p>\n"}, {"fullname": "uisrnn.contrib.range_search_crp_alpha.estimate_crp_alpha", "modulename": "uisrnn.contrib.range_search_crp_alpha", "qualname": "estimate_crp_alpha", "kind": "function", "doc": "<p>Iterate through a range of alpha, return alpha with maximum cdf P{Y|Z}.</p>\n\n<p>Args:\n  train_cluster_id: same as train_cluster_id in demo.py. See <code>demo.py</code> for\n    details.\n  search_range: the range to search for crp_alpha.\n  search_step: the step to search for crp_alpha.\nReturns:\n  cur_alpha: a float variable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_cluster_id</span>, </span><span class=\"param\"><span class=\"n\">search_range</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">search_step</span><span class=\"o\">=</span><span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.evals", "modulename": "uisrnn.evals", "kind": "module", "doc": "<p>Utils for model evaluation.</p>\n"}, {"fullname": "uisrnn.evals.get_list_inverse_index", "modulename": "uisrnn.evals", "qualname": "get_list_inverse_index", "kind": "function", "doc": "<p>Get value to position index from a list of unique ids.</p>\n\n<p>Args:\n  unique_ids: A list of unique integers of strings.</p>\n\n<p>Returns:\n  result: a dict from value to position</p>\n\n<p>Raises:\n  TypeError: If unique_ids is not a list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unique_ids</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.evals.compute_sequence_match_accuracy", "modulename": "uisrnn.evals", "qualname": "compute_sequence_match_accuracy", "kind": "function", "doc": "<p>Compute the accuracy between two sequences by finding optimal matching.</p>\n\n<p>Args:\n  sequence1: A list of integers or strings.\n  sequence2: A list of integers or strings.</p>\n\n<p>Returns:\n  accuracy: sequence matching accuracy as a number in [0.0, 1.0]</p>\n\n<p>Raises:\n  TypeError: If sequence1 or sequence2 is not list.\n  ValueError: If sequence1 and sequence2 are not same size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence1</span>, </span><span class=\"param\"><span class=\"n\">sequence2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.loss_func", "modulename": "uisrnn.loss_func", "kind": "module", "doc": "<p>Loss functions for training.</p>\n"}, {"fullname": "uisrnn.loss_func.weighted_mse_loss", "modulename": "uisrnn.loss_func", "qualname": "weighted_mse_loss", "kind": "function", "doc": "<p>Compute weighted MSE loss.</p>\n\n<p>Note that we are doing weighted loss that only sum up over non-zero entries.</p>\n\n<p>Args:\n  input_tensor: input tensor\n  target_tensor: target tensor\n  weight: weight tensor, in this case 1/sigma^2</p>\n\n<p>Returns:\n  the weighted MSE loss</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_tensor</span>, </span><span class=\"param\"><span class=\"n\">target_tensor</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.loss_func.sigma2_prior_loss", "modulename": "uisrnn.loss_func", "qualname": "sigma2_prior_loss", "kind": "function", "doc": "<p>Compute sigma2 prior loss.</p>\n\n<p>Args:\n  num_non_zero: since rnn_truth is a collection of different length sequences\n      padded with zeros to fit them into a tensor, we count the sum of\n      'real lengths' of all sequences\n  sigma_alpha: inverse gamma shape\n  sigma_beta: inverse gamma scale\n  sigma2: sigma squared</p>\n\n<p>Returns:\n  the sigma2 prior loss</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_non_zero</span>, </span><span class=\"param\"><span class=\"n\">sigma_alpha</span>, </span><span class=\"param\"><span class=\"n\">sigma_beta</span>, </span><span class=\"param\"><span class=\"n\">sigma2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.loss_func.regularization_loss", "modulename": "uisrnn.loss_func", "qualname": "regularization_loss", "kind": "function", "doc": "<p>Compute regularization loss.</p>\n\n<p>Args:\n  params: iterable of all parameters\n  weight: weight for the regularization term</p>\n\n<p>Returns:\n  the regularization loss</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">weight</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn", "modulename": "uisrnn.uisrnn", "kind": "module", "doc": "<p>The UIS-RNN model.</p>\n"}, {"fullname": "uisrnn.uisrnn.CoreRNN", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN", "kind": "class", "doc": "<p>The core Recurent Neural Network used by UIS-RNN.</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "uisrnn.uisrnn.CoreRNN.__init__", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN.__init__", "kind": "function", "doc": "<p>Initialize internal Module state, shared by both nn.Module and ScriptModule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_dim</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span>, </span><span class=\"param\"><span class=\"n\">depth</span>, </span><span class=\"param\"><span class=\"n\">observation_dim</span>, </span><span class=\"param\"><span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "uisrnn.uisrnn.CoreRNN.hidden_size", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN.hidden_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.CoreRNN.linear_mean1", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN.linear_mean1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.CoreRNN.linear_mean2", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN.linear_mean2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.CoreRNN.forward", "modulename": "uisrnn.uisrnn", "qualname": "CoreRNN.forward", "kind": "function", "doc": "<p>The forward function of the module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">input_seq</span>, </span><span class=\"param\"><span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.BeamState", "modulename": "uisrnn.uisrnn", "qualname": "BeamState", "kind": "class", "doc": "<p>Structure that contains necessary states for beam search.</p>\n"}, {"fullname": "uisrnn.uisrnn.BeamState.__init__", "modulename": "uisrnn.uisrnn", "qualname": "BeamState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "uisrnn.uisrnn.BeamState.append", "modulename": "uisrnn.uisrnn", "qualname": "BeamState.append", "kind": "function", "doc": "<p>Append new item to the BeamState.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mean</span>, </span><span class=\"param\"><span class=\"n\">hidden</span>, </span><span class=\"param\"><span class=\"n\">cluster</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN", "kind": "class", "doc": "<p>Unbounded Interleaved-State Recurrent Neural Networks.</p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.__init__", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.__init__", "kind": "function", "doc": "<p>Construct the UISRNN object.</p>\n\n<p>Args:\n  args: Model configurations. See <code>arguments.py</code> for details.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span>)</span>"}, {"fullname": "uisrnn.uisrnn.UISRNN.observation_dim", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.observation_dim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.device", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.rnn_model", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.rnn_model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.rnn_init_hidden", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.rnn_init_hidden", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.estimate_sigma2", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.estimate_sigma2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.estimate_transition_bias", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.estimate_transition_bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.sigma2", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.sigma2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.transition_bias", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.transition_bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.transition_bias_denominator", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.transition_bias_denominator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.crp_alpha", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.crp_alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.logger", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "uisrnn.uisrnn.UISRNN.save", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.save", "kind": "function", "doc": "<p>Save the model to a file.</p>\n\n<p>Args:\n  filepath: the path of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN.load", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.load", "kind": "function", "doc": "<p>Load the model from a file.</p>\n\n<p>Args:\n  filepath: the path of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN.fit_concatenated", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.fit_concatenated", "kind": "function", "doc": "<p>Fit UISRNN model to concatenated sequence and cluster_id.</p>\n\n<p>Args:\n  train_sequence: the training observation sequence, which is a\n    2-dim numpy array of real numbers, of size <code>N * D</code>.</p>\n\n<pre><code>- `N`: summation of lengths of all utterances.\n- `D`: observation dimension.\n\nFor example,\n</code></pre>\n\n<p><pre><code>train_sequence =\n[[1.2 3.0 -4.1 6.0]    --&gt; an entry of speaker #0 from utterance 'iaaa'\n [0.8 -1.1 0.4 0.5]    --&gt; an entry of speaker #1 from utterance 'iaaa'\n [-0.2 1.0 3.8 5.7]    --&gt; an entry of speaker #0 from utterance 'iaaa'\n [3.8 -0.1 1.5 2.3]    --&gt; an entry of speaker #0 from utterance 'ibbb'\n [1.2 1.4 3.6 -2.7]]   --&gt; an entry of speaker #0 from utterance 'ibbb'\n</code></pre></p>\n\n<pre><code>Here `N=5`, `D=4`.\n\nWe concatenate all training utterances into this single sequence.\n</code></pre>\n\n<p>train_cluster_id: the speaker id sequence, which is 1-dim list or\n    numpy array of strings, of size <code>N</code>.\n    For example,</p>\n\n<p><pre><code>train_cluster_id =\n  ['iaaa_0', 'iaaa_1', 'iaaa_0', 'ibbb_0', 'ibbb_0']\n</code></pre></p>\n\n<pre><code>'iaaa_0' means the entry belongs to speaker #0 in utterance 'iaaa'.\n\nNote that the order of entries within an utterance are preserved,\nand all utterances are simply concatenated together.\n</code></pre>\n\n<p>args: Training configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Raises:\n  TypeError: If train_sequence or train_cluster_id is of wrong type.\n  ValueError: If train_sequence or train_cluster_id has wrong dimension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_sequence</span>, </span><span class=\"param\"><span class=\"n\">train_cluster_id</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN.fit", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.fit", "kind": "function", "doc": "<p>Fit UISRNN model.</p>\n\n<p>Args:\n  train_sequences: Either a list of training sequences, or a single\n    concatenated training sequence:</p>\n\n<pre><code>1. train_sequences is list, and each element is a 2-dim numpy array\n   of real numbers, of size: `length * D`.\n   The length varies among different sequences, but the D is the same.\n   In speaker diarization, each sequence is the sequence of speaker\n   embeddings of one utterance.\n2. train_sequences is a single concatenated sequence, which is a\n   2-dim numpy array of real numbers. See `fit_concatenated()`\n   for more details.\n</code></pre>\n\n<p>train_cluster_ids: Ground truth labels for train_sequences:</p>\n\n<pre><code>1. if train_sequences is a list, this must also be a list of the same\n   size, each element being a 1-dim list or numpy array of strings.\n2. if train_sequences is a single concatenated sequence, this\n   must also be the concatenated 1-dim list or numpy array of strings\n</code></pre>\n\n<p>args: Training configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Raises:\n  TypeError: If train_sequences or train_cluster_ids is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_sequences</span>, </span><span class=\"param\"><span class=\"n\">train_cluster_ids</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN.predict_single", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.predict_single", "kind": "function", "doc": "<p>Predict labels for a single test sequence using UISRNN model.</p>\n\n<p>Args:\n  test_sequence: the test observation sequence, which is 2-dim numpy array\n    of real numbers, of size <code>N * D</code>.</p>\n\n<pre><code>- `N`: length of one test utterance.\n- `D` : observation dimension.\n\nFor example:\n</code></pre>\n\n<p><pre><code>test_sequence =\n[[2.2 -1.0 3.0 5.6]    --&gt; 1st entry of utterance 'iccc'\n [0.5 1.8 -3.2 0.4]    --&gt; 2nd entry of utterance 'iccc'\n [-2.2 5.0 1.8 3.7]    --&gt; 3rd entry of utterance 'iccc'\n [-3.8 0.1 1.4 3.3]    --&gt; 4th entry of utterance 'iccc'\n [0.1 2.7 3.5 -1.7]]   --&gt; 5th entry of utterance 'iccc'\n</code></pre></p>\n\n<pre><code>Here `N=5`, `D=4`.\n</code></pre>\n\n<p>args: Inference configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Returns:\n  predicted_cluster_id: predicted speaker id sequence, which is\n    an array of integers, of size <code>N</code>.\n    For example, <code>predicted_cluster_id = [0, 1, 0, 0, 1]</code></p>\n\n<p>Raises:\n  TypeError: If test_sequence is of wrong type.\n  ValueError: If test_sequence has wrong dimension.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_sequence</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.UISRNN.predict", "modulename": "uisrnn.uisrnn", "qualname": "UISRNN.predict", "kind": "function", "doc": "<p>Predict labels for a single or many test sequences using UISRNN model.</p>\n\n<p>Args:\n  test_sequences: Either a list of test sequences, or a single test\n    sequence. Each test sequence is a 2-dim numpy array\n    of real numbers. See <code>predict_single()</code> for details.\n  args: Inference configurations. See <code>arguments.py</code> for details.</p>\n\n<p>Returns:\n  predicted_cluster_ids: Predicted labels for test_sequences.</p>\n\n<pre><code>1. if test_sequences is a list, predicted_cluster_ids will be a list\n   of the same size, where each element being a 1-dim list of strings.\n2. if test_sequences is a single sequence, predicted_cluster_ids will\n   be a 1-dim list of strings\n</code></pre>\n\n<p>Raises:\n  TypeError: If test_sequences is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">test_sequences</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.uisrnn.parallel_predict", "modulename": "uisrnn.uisrnn", "qualname": "parallel_predict", "kind": "function", "doc": "<p>Run prediction in parallel using torch.multiprocessing.</p>\n\n<p>This is a beta feature. It makes prediction slower on CPU. But it's reported\nthat it makes prediction faster on GPU.</p>\n\n<p>Args:\n  model: instance of UISRNN model\n  test_sequences: a list of test sequences, or a single test\n    sequence. Each test sequence is a 2-dim numpy array\n    of real numbers. See <code>predict_single()</code> for details.\n  args: Inference configurations. See <code>arguments.py</code> for details.\n  num_processes: number of parallel processes.</p>\n\n<p>Returns:\n  a list of the same size as test_sequences, where each element\n  being a 1-dim list of strings.</p>\n\n<p>Raises:\n    TypeError: If test_sequences is of wrong type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">test_sequences</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils", "modulename": "uisrnn.utils", "kind": "module", "doc": "<p>Utils for UIS-RNN.</p>\n"}, {"fullname": "uisrnn.utils.generate_random_string", "modulename": "uisrnn.utils", "qualname": "generate_random_string", "kind": "function", "doc": "<p>Generate a random string of upper case letters and digits.</p>\n\n<p>Args:\n  length: length of the generated string</p>\n\n<p>Returns:\n  the generated string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">6</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.enforce_cluster_id_uniqueness", "modulename": "uisrnn.utils", "qualname": "enforce_cluster_id_uniqueness", "kind": "function", "doc": "<p>Enforce uniqueness of cluster id across sequences.</p>\n\n<p>Args:\n  cluster_ids: a list of 1-dim list/numpy.ndarray of strings</p>\n\n<p>Returns:\n  a new list with same length of cluster_ids</p>\n\n<p>Raises:\n  TypeError: if cluster_ids or its element has wrong type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_ids</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.concatenate_training_data", "modulename": "uisrnn.utils", "qualname": "concatenate_training_data", "kind": "function", "doc": "<p>Concatenate training data.</p>\n\n<p>Args:\n  train_sequences: a list of 2-dim numpy arrays to be concatenated\n  train_cluster_ids: a list of 1-dim list/numpy.ndarray of strings\n  enforce_uniqueness: a boolean indicated whether we should enfore uniqueness\n    to train_cluster_ids\n  shuffle: whether to randomly shuffle input order</p>\n\n<p>Returns:\n  concatenated_train_sequence: a 2-dim numpy array\n  concatenated_train_cluster_id: a list of strings</p>\n\n<p>Raises:\n  TypeError: if input has wrong type\n  ValueError: if sizes/dimensions of input or their elements are incorrect</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">train_sequences</span>,</span><span class=\"param\">\t<span class=\"n\">train_cluster_ids</span>,</span><span class=\"param\">\t<span class=\"n\">enforce_uniqueness</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.sample_permuted_segments", "modulename": "uisrnn.utils", "qualname": "sample_permuted_segments", "kind": "function", "doc": "<p>Sample sequences with permuted blocks.</p>\n\n<p>Args:\n  index_sequence: (integer array, size: L)\n    - subsequence index\n    For example, index_sequence = [1,2,6,10,11,12].\n  number_samples: (integer)\n    - number of subsampled block-preserving permuted sequences.\n    For example, number_samples = 5</p>\n\n<p>Returns:\n  sampled_index_sequences: (a list of numpy arrays) - a list of subsampled\n    block-preserving permuted sequences. For example,</p>\n\n<p><pre><code>sampled_index_sequences =\n[[10,11,12,1,2,6],\n [6,1,2,10,11,12],\n [1,2,10,11,12,6],\n [6,1,2,10,11,12],\n [1,2,6,10,11,12]]\n</code></pre></p>\n\n<pre><code>The length of \"sampled_index_sequences\" is \"number_samples\".\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index_sequence</span>, </span><span class=\"param\"><span class=\"n\">number_samples</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.resize_sequence", "modulename": "uisrnn.utils", "qualname": "resize_sequence", "kind": "function", "doc": "<p>Resize sequences for packing and batching.</p>\n\n<p>Args:\n  sequence: (real numpy matrix, size: seq_len*obs_size) - observed sequence\n  cluster_id: (numpy vector, size: seq_len) - cluster indicator sequence\n  num_permutations: int - Number of permutations per utterance sampled.</p>\n\n<p>Returns:\n  sub_sequences: A list of numpy array, with obsevation vector from the same\n    cluster in the same list.\n  seq_lengths: The length of each cluster (+1).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span>, </span><span class=\"param\"><span class=\"n\">cluster_id</span>, </span><span class=\"param\"><span class=\"n\">num_permutations</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.pack_sequence", "modulename": "uisrnn.utils", "qualname": "pack_sequence", "kind": "function", "doc": "<p>Pack sequences for training.</p>\n\n<p>Args:\n  sub_sequences: A list of numpy array, with obsevation vector from the same\n    cluster in the same list.\n  seq_lengths: The length of each cluster (+1).\n  batch_size: int or None - Run batch learning if batch_size is None. Else,\n    run online learning with specified batch size.\n  observation_dim: int - dimension for observation vectors\n  device: str - Your device. E.g., <code>cuda:0</code> or <code>cpu</code>.</p>\n\n<p>Returns:\n  packed_rnn_input: (PackedSequence object) packed rnn input\n  rnn_truth: ground truth</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sub_sequences</span>, </span><span class=\"param\"><span class=\"n\">seq_lengths</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span>, </span><span class=\"param\"><span class=\"n\">observation_dim</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.output_result", "modulename": "uisrnn.utils", "qualname": "output_result", "kind": "function", "doc": "<p>Produce a string to summarize the experiment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_args</span>, </span><span class=\"param\"><span class=\"n\">training_args</span>, </span><span class=\"param\"><span class=\"n\">test_record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "uisrnn.utils.estimate_transition_bias", "modulename": "uisrnn.utils", "qualname": "estimate_transition_bias", "kind": "function", "doc": "<p>Estimate the transition bias.</p>\n\n<p>Args:\n  cluster_id: Either a list of cluster indicator sequences, or a single\n    concatenated sequence. The former is strongly preferred, since the\n    transition_bias estimated from the latter will be inaccurate.\n  smooth: int or float - Smoothing coefficient, avoids -inf value in np.log\n    in the case of a sequence with a single speaker and division by 0 in the\n    case of empty sequences. Using a small value for smooth decreases the\n    bias in the calculation of transition_bias but can also lead to underflow\n    in some remote cases, larger values are safer but less accurate.</p>\n\n<p>Returns:\n  bias: Flipping coin head probability.\n  bias_denominator: The denominator of the bias, used for multiple calls to\n    fit().</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cluster_ids</span>, </span><span class=\"param\"><span class=\"n\">smooth</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();